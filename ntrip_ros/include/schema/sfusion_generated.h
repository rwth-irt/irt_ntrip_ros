// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SFUSION_IRT_SFUSION_H_
#define FLATBUFFERS_GENERATED_SFUSION_IRT_SFUSION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace IRT {
namespace SFusion {

struct Acc;

struct Gyro;

struct Mag;

struct Amb;

struct NovAtelBestpos;

struct NovAtelBestvel;

struct NovAtelClockModel;

struct NovAtelDualAntennaHeading;

struct NovAtelGalClock;

struct NovAtelGalFnavEphem;

struct NovAtelGalInavEphem;

struct NovAtelGalIono;

struct NovAtelGPSEphem;

struct NovAtelIonUTC;

struct PVT;

struct SFusionCommand;

struct SFusionTime;

struct SFusionData;
struct SFusionDataBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Acc FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;
  double timestamp_;
  uint32_t counter_;
  int32_t padding0__;

 public:
  Acc()
      : x_(0),
        y_(0),
        z_(0),
        timestamp_(0),
        counter_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Acc(double _x, double _y, double _z, double _timestamp, uint32_t _counter)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        timestamp_(::flatbuffers::EndianScalar(_timestamp)),
        counter_(::flatbuffers::EndianScalar(_counter)),
        padding0__(0) {
    (void)padding0__;
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  double timestamp() const {
    return ::flatbuffers::EndianScalar(timestamp_);
  }
  uint32_t counter() const {
    return ::flatbuffers::EndianScalar(counter_);
  }
};
FLATBUFFERS_STRUCT_END(Acc, 40);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Gyro FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;
  double timestamp_;
  uint32_t counter_;
  int32_t padding0__;

 public:
  Gyro()
      : x_(0),
        y_(0),
        z_(0),
        timestamp_(0),
        counter_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Gyro(double _x, double _y, double _z, double _timestamp, uint32_t _counter)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        timestamp_(::flatbuffers::EndianScalar(_timestamp)),
        counter_(::flatbuffers::EndianScalar(_counter)),
        padding0__(0) {
    (void)padding0__;
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  double timestamp() const {
    return ::flatbuffers::EndianScalar(timestamp_);
  }
  uint32_t counter() const {
    return ::flatbuffers::EndianScalar(counter_);
  }
};
FLATBUFFERS_STRUCT_END(Gyro, 40);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Mag FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;
  double timestamp_;
  uint32_t counter_;
  int32_t padding0__;

 public:
  Mag()
      : x_(0),
        y_(0),
        z_(0),
        timestamp_(0),
        counter_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Mag(double _x, double _y, double _z, double _timestamp, uint32_t _counter)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        timestamp_(::flatbuffers::EndianScalar(_timestamp)),
        counter_(::flatbuffers::EndianScalar(_counter)),
        padding0__(0) {
    (void)padding0__;
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  double timestamp() const {
    return ::flatbuffers::EndianScalar(timestamp_);
  }
  uint32_t counter() const {
    return ::flatbuffers::EndianScalar(counter_);
  }
};
FLATBUFFERS_STRUCT_END(Mag, 40);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Amb FLATBUFFERS_FINAL_CLASS {
 private:
  double amb_;
  double timestamp_;
  uint32_t counter_;
  int32_t padding0__;

 public:
  Amb()
      : amb_(0),
        timestamp_(0),
        counter_(0),
        padding0__(0) {
    (void)padding0__;
  }
  Amb(double _amb, double _timestamp, uint32_t _counter)
      : amb_(::flatbuffers::EndianScalar(_amb)),
        timestamp_(::flatbuffers::EndianScalar(_timestamp)),
        counter_(::flatbuffers::EndianScalar(_counter)),
        padding0__(0) {
    (void)padding0__;
  }
  double amb() const {
    return ::flatbuffers::EndianScalar(amb_);
  }
  double timestamp() const {
    return ::flatbuffers::EndianScalar(timestamp_);
  }
  uint32_t counter() const {
    return ::flatbuffers::EndianScalar(counter_);
  }
};
FLATBUFFERS_STRUCT_END(Amb, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelBestpos FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t sol_stat_;
  uint32_t pos_type_;
  double lat_;
  double lon_;
  double hgt_;
  float undulation_;
  uint32_t datum_is_number_;
  double lat_sigma_;
  double lon_sigma_;
  double hgt_sigma_;
  int8_t srd_id1_;
  int8_t srd_id2_;
  int8_t srd_id3_;
  int8_t srd_id4_;
  float diff_age_;
  float sol_age_;
  uint8_t num_svs_;
  uint8_t num_soln_svs_;
  uint8_t num_soln_l1_svs_;
  uint8_t num_soln_multi_svs_;
  int8_t reserved_;
  int8_t galileo_beidou_sig_mask_;
  int8_t gps_glonass_sig_mask_;
  int8_t padding1__;  int32_t padding2__;

 public:
  NovAtelBestpos()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        sol_stat_(0),
        pos_type_(0),
        lat_(0),
        lon_(0),
        hgt_(0),
        undulation_(0),
        datum_is_number_(0),
        lat_sigma_(0),
        lon_sigma_(0),
        hgt_sigma_(0),
        srd_id1_(0),
        srd_id2_(0),
        srd_id3_(0),
        srd_id4_(0),
        diff_age_(0),
        sol_age_(0),
        num_svs_(0),
        num_soln_svs_(0),
        num_soln_l1_svs_(0),
        num_soln_multi_svs_(0),
        reserved_(0),
        galileo_beidou_sig_mask_(0),
        gps_glonass_sig_mask_(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  NovAtelBestpos(uint16_t _header_week, int32_t _header_ms, uint32_t _sol_stat, uint32_t _pos_type, double _lat, double _lon, double _hgt, float _undulation, uint32_t _datum_is_number, double _lat_sigma, double _lon_sigma, double _hgt_sigma, int8_t _srd_id1, int8_t _srd_id2, int8_t _srd_id3, int8_t _srd_id4, float _diff_age, float _sol_age, uint8_t _num_svs, uint8_t _num_soln_svs, uint8_t _num_soln_l1_svs, uint8_t _num_soln_multi_svs, int8_t _reserved, int8_t _galileo_beidou_sig_mask, int8_t _gps_glonass_sig_mask)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        sol_stat_(::flatbuffers::EndianScalar(_sol_stat)),
        pos_type_(::flatbuffers::EndianScalar(_pos_type)),
        lat_(::flatbuffers::EndianScalar(_lat)),
        lon_(::flatbuffers::EndianScalar(_lon)),
        hgt_(::flatbuffers::EndianScalar(_hgt)),
        undulation_(::flatbuffers::EndianScalar(_undulation)),
        datum_is_number_(::flatbuffers::EndianScalar(_datum_is_number)),
        lat_sigma_(::flatbuffers::EndianScalar(_lat_sigma)),
        lon_sigma_(::flatbuffers::EndianScalar(_lon_sigma)),
        hgt_sigma_(::flatbuffers::EndianScalar(_hgt_sigma)),
        srd_id1_(::flatbuffers::EndianScalar(_srd_id1)),
        srd_id2_(::flatbuffers::EndianScalar(_srd_id2)),
        srd_id3_(::flatbuffers::EndianScalar(_srd_id3)),
        srd_id4_(::flatbuffers::EndianScalar(_srd_id4)),
        diff_age_(::flatbuffers::EndianScalar(_diff_age)),
        sol_age_(::flatbuffers::EndianScalar(_sol_age)),
        num_svs_(::flatbuffers::EndianScalar(_num_svs)),
        num_soln_svs_(::flatbuffers::EndianScalar(_num_soln_svs)),
        num_soln_l1_svs_(::flatbuffers::EndianScalar(_num_soln_l1_svs)),
        num_soln_multi_svs_(::flatbuffers::EndianScalar(_num_soln_multi_svs)),
        reserved_(::flatbuffers::EndianScalar(_reserved)),
        galileo_beidou_sig_mask_(::flatbuffers::EndianScalar(_galileo_beidou_sig_mask)),
        gps_glonass_sig_mask_(::flatbuffers::EndianScalar(_gps_glonass_sig_mask)),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t sol_stat() const {
    return ::flatbuffers::EndianScalar(sol_stat_);
  }
  uint32_t pos_type() const {
    return ::flatbuffers::EndianScalar(pos_type_);
  }
  double lat() const {
    return ::flatbuffers::EndianScalar(lat_);
  }
  double lon() const {
    return ::flatbuffers::EndianScalar(lon_);
  }
  double hgt() const {
    return ::flatbuffers::EndianScalar(hgt_);
  }
  float undulation() const {
    return ::flatbuffers::EndianScalar(undulation_);
  }
  uint32_t datum_is_number() const {
    return ::flatbuffers::EndianScalar(datum_is_number_);
  }
  double lat_sigma() const {
    return ::flatbuffers::EndianScalar(lat_sigma_);
  }
  double lon_sigma() const {
    return ::flatbuffers::EndianScalar(lon_sigma_);
  }
  double hgt_sigma() const {
    return ::flatbuffers::EndianScalar(hgt_sigma_);
  }
  int8_t srd_id1() const {
    return ::flatbuffers::EndianScalar(srd_id1_);
  }
  int8_t srd_id2() const {
    return ::flatbuffers::EndianScalar(srd_id2_);
  }
  int8_t srd_id3() const {
    return ::flatbuffers::EndianScalar(srd_id3_);
  }
  int8_t srd_id4() const {
    return ::flatbuffers::EndianScalar(srd_id4_);
  }
  float diff_age() const {
    return ::flatbuffers::EndianScalar(diff_age_);
  }
  float sol_age() const {
    return ::flatbuffers::EndianScalar(sol_age_);
  }
  uint8_t num_svs() const {
    return ::flatbuffers::EndianScalar(num_svs_);
  }
  uint8_t num_soln_svs() const {
    return ::flatbuffers::EndianScalar(num_soln_svs_);
  }
  uint8_t num_soln_l1_svs() const {
    return ::flatbuffers::EndianScalar(num_soln_l1_svs_);
  }
  uint8_t num_soln_multi_svs() const {
    return ::flatbuffers::EndianScalar(num_soln_multi_svs_);
  }
  int8_t reserved() const {
    return ::flatbuffers::EndianScalar(reserved_);
  }
  int8_t galileo_beidou_sig_mask() const {
    return ::flatbuffers::EndianScalar(galileo_beidou_sig_mask_);
  }
  int8_t gps_glonass_sig_mask() const {
    return ::flatbuffers::EndianScalar(gps_glonass_sig_mask_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelBestpos, 96);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelBestvel FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t sol_stat_;
  uint32_t vel_type_;
  float latency_;
  float age_;
  double hor_spd_;
  double trk_gnd_;
  double vert_spd_;
  float reserved_;
  int32_t padding1__;

 public:
  NovAtelBestvel()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        sol_stat_(0),
        vel_type_(0),
        latency_(0),
        age_(0),
        hor_spd_(0),
        trk_gnd_(0),
        vert_spd_(0),
        reserved_(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  NovAtelBestvel(uint16_t _header_week, int32_t _header_ms, uint32_t _sol_stat, uint32_t _vel_type, float _latency, float _age, double _hor_spd, double _trk_gnd, double _vert_spd, float _reserved)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        sol_stat_(::flatbuffers::EndianScalar(_sol_stat)),
        vel_type_(::flatbuffers::EndianScalar(_vel_type)),
        latency_(::flatbuffers::EndianScalar(_latency)),
        age_(::flatbuffers::EndianScalar(_age)),
        hor_spd_(::flatbuffers::EndianScalar(_hor_spd)),
        trk_gnd_(::flatbuffers::EndianScalar(_trk_gnd)),
        vert_spd_(::flatbuffers::EndianScalar(_vert_spd)),
        reserved_(::flatbuffers::EndianScalar(_reserved)),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t sol_stat() const {
    return ::flatbuffers::EndianScalar(sol_stat_);
  }
  uint32_t vel_type() const {
    return ::flatbuffers::EndianScalar(vel_type_);
  }
  float latency() const {
    return ::flatbuffers::EndianScalar(latency_);
  }
  float age() const {
    return ::flatbuffers::EndianScalar(age_);
  }
  double hor_spd() const {
    return ::flatbuffers::EndianScalar(hor_spd_);
  }
  double trk_gnd() const {
    return ::flatbuffers::EndianScalar(trk_gnd_);
  }
  double vert_spd() const {
    return ::flatbuffers::EndianScalar(vert_spd_);
  }
  float reserved() const {
    return ::flatbuffers::EndianScalar(reserved_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelBestvel, 56);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) NovAtelClockModel FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t status_;
  uint32_t reject_count_;
  int32_t propagation_time_;
  int32_t update_time_;
  float bias_;
  float rate_;
  float reserved1_;
  float bias_var_;
  float covariace_;
  float reserved2_;
  float reserved3_;
  float rate_var_;
  float reserved4_;
  float reserved5_;
  float reserved6_;
  float reserved7_;
  float instantaneous_bias_;
  float instantaneous_rate_;
  uint8_t reserved8_;
  int8_t padding1__;  int16_t padding2__;

 public:
  NovAtelClockModel()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        status_(0),
        reject_count_(0),
        propagation_time_(0),
        update_time_(0),
        bias_(0),
        rate_(0),
        reserved1_(0),
        bias_var_(0),
        covariace_(0),
        reserved2_(0),
        reserved3_(0),
        rate_var_(0),
        reserved4_(0),
        reserved5_(0),
        reserved6_(0),
        reserved7_(0),
        instantaneous_bias_(0),
        instantaneous_rate_(0),
        reserved8_(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  NovAtelClockModel(uint16_t _header_week, int32_t _header_ms, uint32_t _status, uint32_t _reject_count, int32_t _propagation_time, int32_t _update_time, float _bias, float _rate, float _reserved1, float _bias_var, float _covariace, float _reserved2, float _reserved3, float _rate_var, float _reserved4, float _reserved5, float _reserved6, float _reserved7, float _instantaneous_bias, float _instantaneous_rate, bool _reserved8)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        status_(::flatbuffers::EndianScalar(_status)),
        reject_count_(::flatbuffers::EndianScalar(_reject_count)),
        propagation_time_(::flatbuffers::EndianScalar(_propagation_time)),
        update_time_(::flatbuffers::EndianScalar(_update_time)),
        bias_(::flatbuffers::EndianScalar(_bias)),
        rate_(::flatbuffers::EndianScalar(_rate)),
        reserved1_(::flatbuffers::EndianScalar(_reserved1)),
        bias_var_(::flatbuffers::EndianScalar(_bias_var)),
        covariace_(::flatbuffers::EndianScalar(_covariace)),
        reserved2_(::flatbuffers::EndianScalar(_reserved2)),
        reserved3_(::flatbuffers::EndianScalar(_reserved3)),
        rate_var_(::flatbuffers::EndianScalar(_rate_var)),
        reserved4_(::flatbuffers::EndianScalar(_reserved4)),
        reserved5_(::flatbuffers::EndianScalar(_reserved5)),
        reserved6_(::flatbuffers::EndianScalar(_reserved6)),
        reserved7_(::flatbuffers::EndianScalar(_reserved7)),
        instantaneous_bias_(::flatbuffers::EndianScalar(_instantaneous_bias)),
        instantaneous_rate_(::flatbuffers::EndianScalar(_instantaneous_rate)),
        reserved8_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_reserved8))),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t status() const {
    return ::flatbuffers::EndianScalar(status_);
  }
  uint32_t reject_count() const {
    return ::flatbuffers::EndianScalar(reject_count_);
  }
  int32_t propagation_time() const {
    return ::flatbuffers::EndianScalar(propagation_time_);
  }
  int32_t update_time() const {
    return ::flatbuffers::EndianScalar(update_time_);
  }
  float bias() const {
    return ::flatbuffers::EndianScalar(bias_);
  }
  float rate() const {
    return ::flatbuffers::EndianScalar(rate_);
  }
  float reserved1() const {
    return ::flatbuffers::EndianScalar(reserved1_);
  }
  float bias_var() const {
    return ::flatbuffers::EndianScalar(bias_var_);
  }
  float covariace() const {
    return ::flatbuffers::EndianScalar(covariace_);
  }
  float reserved2() const {
    return ::flatbuffers::EndianScalar(reserved2_);
  }
  float reserved3() const {
    return ::flatbuffers::EndianScalar(reserved3_);
  }
  float rate_var() const {
    return ::flatbuffers::EndianScalar(rate_var_);
  }
  float reserved4() const {
    return ::flatbuffers::EndianScalar(reserved4_);
  }
  float reserved5() const {
    return ::flatbuffers::EndianScalar(reserved5_);
  }
  float reserved6() const {
    return ::flatbuffers::EndianScalar(reserved6_);
  }
  float reserved7() const {
    return ::flatbuffers::EndianScalar(reserved7_);
  }
  float instantaneous_bias() const {
    return ::flatbuffers::EndianScalar(instantaneous_bias_);
  }
  float instantaneous_rate() const {
    return ::flatbuffers::EndianScalar(instantaneous_rate_);
  }
  bool reserved8() const {
    return ::flatbuffers::EndianScalar(reserved8_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(NovAtelClockModel, 84);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) NovAtelDualAntennaHeading FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t sol_stat_;
  uint32_t pos_type_;
  float length_;
  float heading_;
  float pitch_;
  float reserved_;
  float hdg_std_;
  float pitch_std_;
  int8_t srd_id1_;
  int8_t srd_id2_;
  int8_t srd_id3_;
  int8_t srd_id4_;
  uint8_t num_svs_;
  uint8_t num_soln_svs_;
  uint8_t num_soln_l1_svs_;
  uint8_t num_soln_multi_svs_;
  int8_t sol_source_;
  int8_t ext_sol_stat_;
  int8_t galileo_beidou_sig_mask_;
  int8_t gps_glonass_sig_mask_;

 public:
  NovAtelDualAntennaHeading()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        sol_stat_(0),
        pos_type_(0),
        length_(0),
        heading_(0),
        pitch_(0),
        reserved_(0),
        hdg_std_(0),
        pitch_std_(0),
        srd_id1_(0),
        srd_id2_(0),
        srd_id3_(0),
        srd_id4_(0),
        num_svs_(0),
        num_soln_svs_(0),
        num_soln_l1_svs_(0),
        num_soln_multi_svs_(0),
        sol_source_(0),
        ext_sol_stat_(0),
        galileo_beidou_sig_mask_(0),
        gps_glonass_sig_mask_(0) {
    (void)padding0__;
  }
  NovAtelDualAntennaHeading(uint16_t _header_week, int32_t _header_ms, uint32_t _sol_stat, uint32_t _pos_type, float _length, float _heading, float _pitch, float _reserved, float _hdg_std, float _pitch_std, int8_t _srd_id1, int8_t _srd_id2, int8_t _srd_id3, int8_t _srd_id4, uint8_t _num_svs, uint8_t _num_soln_svs, uint8_t _num_soln_l1_svs, uint8_t _num_soln_multi_svs, int8_t _sol_source, int8_t _ext_sol_stat, int8_t _galileo_beidou_sig_mask, int8_t _gps_glonass_sig_mask)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        sol_stat_(::flatbuffers::EndianScalar(_sol_stat)),
        pos_type_(::flatbuffers::EndianScalar(_pos_type)),
        length_(::flatbuffers::EndianScalar(_length)),
        heading_(::flatbuffers::EndianScalar(_heading)),
        pitch_(::flatbuffers::EndianScalar(_pitch)),
        reserved_(::flatbuffers::EndianScalar(_reserved)),
        hdg_std_(::flatbuffers::EndianScalar(_hdg_std)),
        pitch_std_(::flatbuffers::EndianScalar(_pitch_std)),
        srd_id1_(::flatbuffers::EndianScalar(_srd_id1)),
        srd_id2_(::flatbuffers::EndianScalar(_srd_id2)),
        srd_id3_(::flatbuffers::EndianScalar(_srd_id3)),
        srd_id4_(::flatbuffers::EndianScalar(_srd_id4)),
        num_svs_(::flatbuffers::EndianScalar(_num_svs)),
        num_soln_svs_(::flatbuffers::EndianScalar(_num_soln_svs)),
        num_soln_l1_svs_(::flatbuffers::EndianScalar(_num_soln_l1_svs)),
        num_soln_multi_svs_(::flatbuffers::EndianScalar(_num_soln_multi_svs)),
        sol_source_(::flatbuffers::EndianScalar(_sol_source)),
        ext_sol_stat_(::flatbuffers::EndianScalar(_ext_sol_stat)),
        galileo_beidou_sig_mask_(::flatbuffers::EndianScalar(_galileo_beidou_sig_mask)),
        gps_glonass_sig_mask_(::flatbuffers::EndianScalar(_gps_glonass_sig_mask)) {
    (void)padding0__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t sol_stat() const {
    return ::flatbuffers::EndianScalar(sol_stat_);
  }
  uint32_t pos_type() const {
    return ::flatbuffers::EndianScalar(pos_type_);
  }
  float length() const {
    return ::flatbuffers::EndianScalar(length_);
  }
  float heading() const {
    return ::flatbuffers::EndianScalar(heading_);
  }
  float pitch() const {
    return ::flatbuffers::EndianScalar(pitch_);
  }
  float reserved() const {
    return ::flatbuffers::EndianScalar(reserved_);
  }
  float hdg_std() const {
    return ::flatbuffers::EndianScalar(hdg_std_);
  }
  float pitch_std() const {
    return ::flatbuffers::EndianScalar(pitch_std_);
  }
  int8_t srd_id1() const {
    return ::flatbuffers::EndianScalar(srd_id1_);
  }
  int8_t srd_id2() const {
    return ::flatbuffers::EndianScalar(srd_id2_);
  }
  int8_t srd_id3() const {
    return ::flatbuffers::EndianScalar(srd_id3_);
  }
  int8_t srd_id4() const {
    return ::flatbuffers::EndianScalar(srd_id4_);
  }
  uint8_t num_svs() const {
    return ::flatbuffers::EndianScalar(num_svs_);
  }
  uint8_t num_soln_svs() const {
    return ::flatbuffers::EndianScalar(num_soln_svs_);
  }
  uint8_t num_soln_l1_svs() const {
    return ::flatbuffers::EndianScalar(num_soln_l1_svs_);
  }
  uint8_t num_soln_multi_svs() const {
    return ::flatbuffers::EndianScalar(num_soln_multi_svs_);
  }
  int8_t sol_source() const {
    return ::flatbuffers::EndianScalar(sol_source_);
  }
  int8_t ext_sol_stat() const {
    return ::flatbuffers::EndianScalar(ext_sol_stat_);
  }
  int8_t galileo_beidou_sig_mask() const {
    return ::flatbuffers::EndianScalar(galileo_beidou_sig_mask_);
  }
  int8_t gps_glonass_sig_mask() const {
    return ::flatbuffers::EndianScalar(gps_glonass_sig_mask_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelDualAntennaHeading, 52);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelGalClock FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  float a0_;
  float a1_;
  int32_t delta_tls_;
  uint32_t tot_;
  uint32_t wnt_;
  uint32_t wnlsf_;
  uint32_t dn_;
  int32_t delta_tlsf_;
  double a0g_;
  double a1g_;
  uint32_t t0g_;
  uint32_t wn0g_;

 public:
  NovAtelGalClock()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        a0_(0),
        a1_(0),
        delta_tls_(0),
        tot_(0),
        wnt_(0),
        wnlsf_(0),
        dn_(0),
        delta_tlsf_(0),
        a0g_(0),
        a1g_(0),
        t0g_(0),
        wn0g_(0) {
    (void)padding0__;
  }
  NovAtelGalClock(uint16_t _header_week, int32_t _header_ms, float _a0, float _a1, int32_t _delta_tls, uint32_t _tot, uint32_t _wnt, uint32_t _wnlsf, uint32_t _dn, int32_t _delta_tlsf, double _a0g, double _a1g, uint32_t _t0g, uint32_t _wn0g)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        a0_(::flatbuffers::EndianScalar(_a0)),
        a1_(::flatbuffers::EndianScalar(_a1)),
        delta_tls_(::flatbuffers::EndianScalar(_delta_tls)),
        tot_(::flatbuffers::EndianScalar(_tot)),
        wnt_(::flatbuffers::EndianScalar(_wnt)),
        wnlsf_(::flatbuffers::EndianScalar(_wnlsf)),
        dn_(::flatbuffers::EndianScalar(_dn)),
        delta_tlsf_(::flatbuffers::EndianScalar(_delta_tlsf)),
        a0g_(::flatbuffers::EndianScalar(_a0g)),
        a1g_(::flatbuffers::EndianScalar(_a1g)),
        t0g_(::flatbuffers::EndianScalar(_t0g)),
        wn0g_(::flatbuffers::EndianScalar(_wn0g)) {
    (void)padding0__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  float a0() const {
    return ::flatbuffers::EndianScalar(a0_);
  }
  float a1() const {
    return ::flatbuffers::EndianScalar(a1_);
  }
  int32_t delta_tls() const {
    return ::flatbuffers::EndianScalar(delta_tls_);
  }
  uint32_t tot() const {
    return ::flatbuffers::EndianScalar(tot_);
  }
  uint32_t wnt() const {
    return ::flatbuffers::EndianScalar(wnt_);
  }
  uint32_t wnlsf() const {
    return ::flatbuffers::EndianScalar(wnlsf_);
  }
  uint32_t dn() const {
    return ::flatbuffers::EndianScalar(dn_);
  }
  int32_t delta_tlsf() const {
    return ::flatbuffers::EndianScalar(delta_tlsf_);
  }
  double a0g() const {
    return ::flatbuffers::EndianScalar(a0g_);
  }
  double a1g() const {
    return ::flatbuffers::EndianScalar(a1g_);
  }
  uint32_t t0g() const {
    return ::flatbuffers::EndianScalar(t0g_);
  }
  uint32_t wn0g() const {
    return ::flatbuffers::EndianScalar(wn0g_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelGalClock, 64);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelGalFnavEphem FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t sat_id_;
  uint8_t e5a_health_;
  uint8_t e5a_dvs_;
  uint8_t reserved1_;
  uint8_t reserved2_;
  uint16_t iodnav_;
  uint8_t sisa_index_;
  uint8_t reserved3_;
  uint32_t t0e_;
  uint32_t t0c_;
  int32_t padding1__;
  double m0_;
  double delta_n_;
  double ecc_;
  double roota_;
  double i0_;
  double idot_;
  double omega0_;
  double omega_;
  double omega_dot_;
  double cuc_;
  double cus_;
  double crc_;
  double crs_;
  double cic_;
  double cis_;
  double af0_;
  double af1_;
  double af2_;
  double e1e5a_bgd_;

 public:
  NovAtelGalFnavEphem()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        sat_id_(0),
        e5a_health_(0),
        e5a_dvs_(0),
        reserved1_(0),
        reserved2_(0),
        iodnav_(0),
        sisa_index_(0),
        reserved3_(0),
        t0e_(0),
        t0c_(0),
        padding1__(0),
        m0_(0),
        delta_n_(0),
        ecc_(0),
        roota_(0),
        i0_(0),
        idot_(0),
        omega0_(0),
        omega_(0),
        omega_dot_(0),
        cuc_(0),
        cus_(0),
        crc_(0),
        crs_(0),
        cic_(0),
        cis_(0),
        af0_(0),
        af1_(0),
        af2_(0),
        e1e5a_bgd_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  NovAtelGalFnavEphem(uint16_t _header_week, int32_t _header_ms, uint32_t _sat_id, uint8_t _e5a_health, uint8_t _e5a_dvs, uint8_t _reserved1, uint8_t _reserved2, uint16_t _iodnav, uint8_t _sisa_index, uint8_t _reserved3, uint32_t _t0e, uint32_t _t0c, double _m0, double _delta_n, double _ecc, double _roota, double _i0, double _idot, double _omega0, double _omega, double _omega_dot, double _cuc, double _cus, double _crc, double _crs, double _cic, double _cis, double _af0, double _af1, double _af2, double _e1e5a_bgd)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        sat_id_(::flatbuffers::EndianScalar(_sat_id)),
        e5a_health_(::flatbuffers::EndianScalar(_e5a_health)),
        e5a_dvs_(::flatbuffers::EndianScalar(_e5a_dvs)),
        reserved1_(::flatbuffers::EndianScalar(_reserved1)),
        reserved2_(::flatbuffers::EndianScalar(_reserved2)),
        iodnav_(::flatbuffers::EndianScalar(_iodnav)),
        sisa_index_(::flatbuffers::EndianScalar(_sisa_index)),
        reserved3_(::flatbuffers::EndianScalar(_reserved3)),
        t0e_(::flatbuffers::EndianScalar(_t0e)),
        t0c_(::flatbuffers::EndianScalar(_t0c)),
        padding1__(0),
        m0_(::flatbuffers::EndianScalar(_m0)),
        delta_n_(::flatbuffers::EndianScalar(_delta_n)),
        ecc_(::flatbuffers::EndianScalar(_ecc)),
        roota_(::flatbuffers::EndianScalar(_roota)),
        i0_(::flatbuffers::EndianScalar(_i0)),
        idot_(::flatbuffers::EndianScalar(_idot)),
        omega0_(::flatbuffers::EndianScalar(_omega0)),
        omega_(::flatbuffers::EndianScalar(_omega)),
        omega_dot_(::flatbuffers::EndianScalar(_omega_dot)),
        cuc_(::flatbuffers::EndianScalar(_cuc)),
        cus_(::flatbuffers::EndianScalar(_cus)),
        crc_(::flatbuffers::EndianScalar(_crc)),
        crs_(::flatbuffers::EndianScalar(_crs)),
        cic_(::flatbuffers::EndianScalar(_cic)),
        cis_(::flatbuffers::EndianScalar(_cis)),
        af0_(::flatbuffers::EndianScalar(_af0)),
        af1_(::flatbuffers::EndianScalar(_af1)),
        af2_(::flatbuffers::EndianScalar(_af2)),
        e1e5a_bgd_(::flatbuffers::EndianScalar(_e1e5a_bgd)) {
    (void)padding0__;
    (void)padding1__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t sat_id() const {
    return ::flatbuffers::EndianScalar(sat_id_);
  }
  uint8_t e5a_health() const {
    return ::flatbuffers::EndianScalar(e5a_health_);
  }
  uint8_t e5a_dvs() const {
    return ::flatbuffers::EndianScalar(e5a_dvs_);
  }
  uint8_t reserved1() const {
    return ::flatbuffers::EndianScalar(reserved1_);
  }
  uint8_t reserved2() const {
    return ::flatbuffers::EndianScalar(reserved2_);
  }
  uint16_t iodnav() const {
    return ::flatbuffers::EndianScalar(iodnav_);
  }
  uint8_t sisa_index() const {
    return ::flatbuffers::EndianScalar(sisa_index_);
  }
  uint8_t reserved3() const {
    return ::flatbuffers::EndianScalar(reserved3_);
  }
  uint32_t t0e() const {
    return ::flatbuffers::EndianScalar(t0e_);
  }
  uint32_t t0c() const {
    return ::flatbuffers::EndianScalar(t0c_);
  }
  double m0() const {
    return ::flatbuffers::EndianScalar(m0_);
  }
  double delta_n() const {
    return ::flatbuffers::EndianScalar(delta_n_);
  }
  double ecc() const {
    return ::flatbuffers::EndianScalar(ecc_);
  }
  double roota() const {
    return ::flatbuffers::EndianScalar(roota_);
  }
  double i0() const {
    return ::flatbuffers::EndianScalar(i0_);
  }
  double idot() const {
    return ::flatbuffers::EndianScalar(idot_);
  }
  double omega0() const {
    return ::flatbuffers::EndianScalar(omega0_);
  }
  double omega() const {
    return ::flatbuffers::EndianScalar(omega_);
  }
  double omega_dot() const {
    return ::flatbuffers::EndianScalar(omega_dot_);
  }
  double cuc() const {
    return ::flatbuffers::EndianScalar(cuc_);
  }
  double cus() const {
    return ::flatbuffers::EndianScalar(cus_);
  }
  double crc() const {
    return ::flatbuffers::EndianScalar(crc_);
  }
  double crs() const {
    return ::flatbuffers::EndianScalar(crs_);
  }
  double cic() const {
    return ::flatbuffers::EndianScalar(cic_);
  }
  double cis() const {
    return ::flatbuffers::EndianScalar(cis_);
  }
  double af0() const {
    return ::flatbuffers::EndianScalar(af0_);
  }
  double af1() const {
    return ::flatbuffers::EndianScalar(af1_);
  }
  double af2() const {
    return ::flatbuffers::EndianScalar(af2_);
  }
  double e1e5a_bgd() const {
    return ::flatbuffers::EndianScalar(e1e5a_bgd_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelGalFnavEphem, 184);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelGalInavEphem FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t sat_id_;
  uint8_t e5b_health_;
  uint8_t e5b_dvs_;
  uint8_t reserved1_;
  uint8_t reserved2_;
  uint8_t e1b_health_;
  uint8_t e1b_dvs_;
  uint8_t reserved3_;
  uint8_t reserved4_;
  uint16_t iodnav_;
  uint8_t sisa_index_;
  uint8_t inavsource_;
  uint32_t t0e_;
  uint32_t t0c_;
  double m0_;
  double delta_n_;
  double ecc_;
  double roota_;
  double i0_;
  double idot_;
  double omega0_;
  double omega_;
  double omegadot_;
  double cuc_;
  double cus_;
  double crc_;
  double crs_;
  double cic_;
  double cis_;
  double af0_;
  double af1_;
  double af2_;
  double e1e5a_bgd_;
  double e1e5b_bgd_;

 public:
  NovAtelGalInavEphem()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        sat_id_(0),
        e5b_health_(0),
        e5b_dvs_(0),
        reserved1_(0),
        reserved2_(0),
        e1b_health_(0),
        e1b_dvs_(0),
        reserved3_(0),
        reserved4_(0),
        iodnav_(0),
        sisa_index_(0),
        inavsource_(0),
        t0e_(0),
        t0c_(0),
        m0_(0),
        delta_n_(0),
        ecc_(0),
        roota_(0),
        i0_(0),
        idot_(0),
        omega0_(0),
        omega_(0),
        omegadot_(0),
        cuc_(0),
        cus_(0),
        crc_(0),
        crs_(0),
        cic_(0),
        cis_(0),
        af0_(0),
        af1_(0),
        af2_(0),
        e1e5a_bgd_(0),
        e1e5b_bgd_(0) {
    (void)padding0__;
  }
  NovAtelGalInavEphem(uint16_t _header_week, int32_t _header_ms, uint32_t _sat_id, uint8_t _e5b_health, uint8_t _e5b_dvs, uint8_t _reserved1, uint8_t _reserved2, uint8_t _e1b_health, uint8_t _e1b_dvs, uint8_t _reserved3, uint8_t _reserved4, uint16_t _iodnav, uint8_t _sisa_index, uint8_t _inavsource, uint32_t _t0e, uint32_t _t0c, double _m0, double _delta_n, double _ecc, double _roota, double _i0, double _idot, double _omega0, double _omega, double _omegadot, double _cuc, double _cus, double _crc, double _crs, double _cic, double _cis, double _af0, double _af1, double _af2, double _e1e5a_bgd, double _e1e5b_bgd)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        sat_id_(::flatbuffers::EndianScalar(_sat_id)),
        e5b_health_(::flatbuffers::EndianScalar(_e5b_health)),
        e5b_dvs_(::flatbuffers::EndianScalar(_e5b_dvs)),
        reserved1_(::flatbuffers::EndianScalar(_reserved1)),
        reserved2_(::flatbuffers::EndianScalar(_reserved2)),
        e1b_health_(::flatbuffers::EndianScalar(_e1b_health)),
        e1b_dvs_(::flatbuffers::EndianScalar(_e1b_dvs)),
        reserved3_(::flatbuffers::EndianScalar(_reserved3)),
        reserved4_(::flatbuffers::EndianScalar(_reserved4)),
        iodnav_(::flatbuffers::EndianScalar(_iodnav)),
        sisa_index_(::flatbuffers::EndianScalar(_sisa_index)),
        inavsource_(::flatbuffers::EndianScalar(_inavsource)),
        t0e_(::flatbuffers::EndianScalar(_t0e)),
        t0c_(::flatbuffers::EndianScalar(_t0c)),
        m0_(::flatbuffers::EndianScalar(_m0)),
        delta_n_(::flatbuffers::EndianScalar(_delta_n)),
        ecc_(::flatbuffers::EndianScalar(_ecc)),
        roota_(::flatbuffers::EndianScalar(_roota)),
        i0_(::flatbuffers::EndianScalar(_i0)),
        idot_(::flatbuffers::EndianScalar(_idot)),
        omega0_(::flatbuffers::EndianScalar(_omega0)),
        omega_(::flatbuffers::EndianScalar(_omega)),
        omegadot_(::flatbuffers::EndianScalar(_omegadot)),
        cuc_(::flatbuffers::EndianScalar(_cuc)),
        cus_(::flatbuffers::EndianScalar(_cus)),
        crc_(::flatbuffers::EndianScalar(_crc)),
        crs_(::flatbuffers::EndianScalar(_crs)),
        cic_(::flatbuffers::EndianScalar(_cic)),
        cis_(::flatbuffers::EndianScalar(_cis)),
        af0_(::flatbuffers::EndianScalar(_af0)),
        af1_(::flatbuffers::EndianScalar(_af1)),
        af2_(::flatbuffers::EndianScalar(_af2)),
        e1e5a_bgd_(::flatbuffers::EndianScalar(_e1e5a_bgd)),
        e1e5b_bgd_(::flatbuffers::EndianScalar(_e1e5b_bgd)) {
    (void)padding0__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t sat_id() const {
    return ::flatbuffers::EndianScalar(sat_id_);
  }
  uint8_t e5b_health() const {
    return ::flatbuffers::EndianScalar(e5b_health_);
  }
  uint8_t e5b_dvs() const {
    return ::flatbuffers::EndianScalar(e5b_dvs_);
  }
  uint8_t reserved1() const {
    return ::flatbuffers::EndianScalar(reserved1_);
  }
  uint8_t reserved2() const {
    return ::flatbuffers::EndianScalar(reserved2_);
  }
  uint8_t e1b_health() const {
    return ::flatbuffers::EndianScalar(e1b_health_);
  }
  uint8_t e1b_dvs() const {
    return ::flatbuffers::EndianScalar(e1b_dvs_);
  }
  uint8_t reserved3() const {
    return ::flatbuffers::EndianScalar(reserved3_);
  }
  uint8_t reserved4() const {
    return ::flatbuffers::EndianScalar(reserved4_);
  }
  uint16_t iodnav() const {
    return ::flatbuffers::EndianScalar(iodnav_);
  }
  uint8_t sisa_index() const {
    return ::flatbuffers::EndianScalar(sisa_index_);
  }
  uint8_t inavsource() const {
    return ::flatbuffers::EndianScalar(inavsource_);
  }
  uint32_t t0e() const {
    return ::flatbuffers::EndianScalar(t0e_);
  }
  uint32_t t0c() const {
    return ::flatbuffers::EndianScalar(t0c_);
  }
  double m0() const {
    return ::flatbuffers::EndianScalar(m0_);
  }
  double delta_n() const {
    return ::flatbuffers::EndianScalar(delta_n_);
  }
  double ecc() const {
    return ::flatbuffers::EndianScalar(ecc_);
  }
  double roota() const {
    return ::flatbuffers::EndianScalar(roota_);
  }
  double i0() const {
    return ::flatbuffers::EndianScalar(i0_);
  }
  double idot() const {
    return ::flatbuffers::EndianScalar(idot_);
  }
  double omega0() const {
    return ::flatbuffers::EndianScalar(omega0_);
  }
  double omega() const {
    return ::flatbuffers::EndianScalar(omega_);
  }
  double omegadot() const {
    return ::flatbuffers::EndianScalar(omegadot_);
  }
  double cuc() const {
    return ::flatbuffers::EndianScalar(cuc_);
  }
  double cus() const {
    return ::flatbuffers::EndianScalar(cus_);
  }
  double crc() const {
    return ::flatbuffers::EndianScalar(crc_);
  }
  double crs() const {
    return ::flatbuffers::EndianScalar(crs_);
  }
  double cic() const {
    return ::flatbuffers::EndianScalar(cic_);
  }
  double cis() const {
    return ::flatbuffers::EndianScalar(cis_);
  }
  double af0() const {
    return ::flatbuffers::EndianScalar(af0_);
  }
  double af1() const {
    return ::flatbuffers::EndianScalar(af1_);
  }
  double af2() const {
    return ::flatbuffers::EndianScalar(af2_);
  }
  double e1e5a_bgd() const {
    return ::flatbuffers::EndianScalar(e1e5a_bgd_);
  }
  double e1e5b_bgd() const {
    return ::flatbuffers::EndianScalar(e1e5b_bgd_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelGalInavEphem, 192);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelGalIono FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  double ai0_;
  double ai1_;
  double ai2_;
  uint8_t sf1_;
  uint8_t sf2_;
  uint8_t sf3_;
  uint8_t sf4_;
  uint8_t sf5_;
  int8_t padding1__;  int16_t padding2__;

 public:
  NovAtelGalIono()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        ai0_(0),
        ai1_(0),
        ai2_(0),
        sf1_(0),
        sf2_(0),
        sf3_(0),
        sf4_(0),
        sf5_(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  NovAtelGalIono(uint16_t _header_week, int32_t _header_ms, double _ai0, double _ai1, double _ai2, uint8_t _sf1, uint8_t _sf2, uint8_t _sf3, uint8_t _sf4, uint8_t _sf5)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        ai0_(::flatbuffers::EndianScalar(_ai0)),
        ai1_(::flatbuffers::EndianScalar(_ai1)),
        ai2_(::flatbuffers::EndianScalar(_ai2)),
        sf1_(::flatbuffers::EndianScalar(_sf1)),
        sf2_(::flatbuffers::EndianScalar(_sf2)),
        sf3_(::flatbuffers::EndianScalar(_sf3)),
        sf4_(::flatbuffers::EndianScalar(_sf4)),
        sf5_(::flatbuffers::EndianScalar(_sf5)),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  double ai0() const {
    return ::flatbuffers::EndianScalar(ai0_);
  }
  double ai1() const {
    return ::flatbuffers::EndianScalar(ai1_);
  }
  double ai2() const {
    return ::flatbuffers::EndianScalar(ai2_);
  }
  uint8_t sf1() const {
    return ::flatbuffers::EndianScalar(sf1_);
  }
  uint8_t sf2() const {
    return ::flatbuffers::EndianScalar(sf2_);
  }
  uint8_t sf3() const {
    return ::flatbuffers::EndianScalar(sf3_);
  }
  uint8_t sf4() const {
    return ::flatbuffers::EndianScalar(sf4_);
  }
  uint8_t sf5() const {
    return ::flatbuffers::EndianScalar(sf5_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelGalIono, 40);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelGPSEphem FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  uint32_t prn_;
  int32_t padding1__;
  double tow_;
  uint32_t health_;
  uint32_t iode1_;
  uint32_t iode2_;
  uint32_t week_;
  uint32_t z_week_;
  int32_t padding2__;
  double t0e_;
  double a_;
  double delta_n_;
  double m0_;
  double ecc_;
  double omega_;
  double cuc_;
  double cus_;
  double crc_;
  double crs_;
  double cic_;
  double cis_;
  double i0_;
  double idot_;
  double omega0_;
  double omegadot_;
  uint32_t iodc_;
  int32_t padding3__;
  double t0c_;
  double tgd_;
  double af0_;
  double af1_;
  double af2_;
  uint8_t a_s_;
  int8_t padding4__;  int16_t padding5__;  int32_t padding6__;
  double n_;
  double ura_;

 public:
  NovAtelGPSEphem()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        prn_(0),
        padding1__(0),
        tow_(0),
        health_(0),
        iode1_(0),
        iode2_(0),
        week_(0),
        z_week_(0),
        padding2__(0),
        t0e_(0),
        a_(0),
        delta_n_(0),
        m0_(0),
        ecc_(0),
        omega_(0),
        cuc_(0),
        cus_(0),
        crc_(0),
        crs_(0),
        cic_(0),
        cis_(0),
        i0_(0),
        idot_(0),
        omega0_(0),
        omegadot_(0),
        iodc_(0),
        padding3__(0),
        t0c_(0),
        tgd_(0),
        af0_(0),
        af1_(0),
        af2_(0),
        a_s_(0),
        padding4__(0),
        padding5__(0),
        padding6__(0),
        n_(0),
        ura_(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
    (void)padding3__;
    (void)padding4__;
    (void)padding5__;
    (void)padding6__;
  }
  NovAtelGPSEphem(uint16_t _header_week, int32_t _header_ms, uint32_t _prn, double _tow, uint32_t _health, uint32_t _iode1, uint32_t _iode2, uint32_t _week, uint32_t _z_week, double _t0e, double _a, double _delta_n, double _m0, double _ecc, double _omega, double _cuc, double _cus, double _crc, double _crs, double _cic, double _cis, double _i0, double _idot, double _omega0, double _omegadot, uint32_t _iodc, double _t0c, double _tgd, double _af0, double _af1, double _af2, bool _a_s, double _n, double _ura)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        prn_(::flatbuffers::EndianScalar(_prn)),
        padding1__(0),
        tow_(::flatbuffers::EndianScalar(_tow)),
        health_(::flatbuffers::EndianScalar(_health)),
        iode1_(::flatbuffers::EndianScalar(_iode1)),
        iode2_(::flatbuffers::EndianScalar(_iode2)),
        week_(::flatbuffers::EndianScalar(_week)),
        z_week_(::flatbuffers::EndianScalar(_z_week)),
        padding2__(0),
        t0e_(::flatbuffers::EndianScalar(_t0e)),
        a_(::flatbuffers::EndianScalar(_a)),
        delta_n_(::flatbuffers::EndianScalar(_delta_n)),
        m0_(::flatbuffers::EndianScalar(_m0)),
        ecc_(::flatbuffers::EndianScalar(_ecc)),
        omega_(::flatbuffers::EndianScalar(_omega)),
        cuc_(::flatbuffers::EndianScalar(_cuc)),
        cus_(::flatbuffers::EndianScalar(_cus)),
        crc_(::flatbuffers::EndianScalar(_crc)),
        crs_(::flatbuffers::EndianScalar(_crs)),
        cic_(::flatbuffers::EndianScalar(_cic)),
        cis_(::flatbuffers::EndianScalar(_cis)),
        i0_(::flatbuffers::EndianScalar(_i0)),
        idot_(::flatbuffers::EndianScalar(_idot)),
        omega0_(::flatbuffers::EndianScalar(_omega0)),
        omegadot_(::flatbuffers::EndianScalar(_omegadot)),
        iodc_(::flatbuffers::EndianScalar(_iodc)),
        padding3__(0),
        t0c_(::flatbuffers::EndianScalar(_t0c)),
        tgd_(::flatbuffers::EndianScalar(_tgd)),
        af0_(::flatbuffers::EndianScalar(_af0)),
        af1_(::flatbuffers::EndianScalar(_af1)),
        af2_(::flatbuffers::EndianScalar(_af2)),
        a_s_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_a_s))),
        padding4__(0),
        padding5__(0),
        padding6__(0),
        n_(::flatbuffers::EndianScalar(_n)),
        ura_(::flatbuffers::EndianScalar(_ura)) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
    (void)padding3__;
    (void)padding4__;
    (void)padding5__;
    (void)padding6__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  uint32_t prn() const {
    return ::flatbuffers::EndianScalar(prn_);
  }
  double tow() const {
    return ::flatbuffers::EndianScalar(tow_);
  }
  uint32_t health() const {
    return ::flatbuffers::EndianScalar(health_);
  }
  uint32_t iode1() const {
    return ::flatbuffers::EndianScalar(iode1_);
  }
  uint32_t iode2() const {
    return ::flatbuffers::EndianScalar(iode2_);
  }
  uint32_t week() const {
    return ::flatbuffers::EndianScalar(week_);
  }
  uint32_t z_week() const {
    return ::flatbuffers::EndianScalar(z_week_);
  }
  double t0e() const {
    return ::flatbuffers::EndianScalar(t0e_);
  }
  double a() const {
    return ::flatbuffers::EndianScalar(a_);
  }
  double delta_n() const {
    return ::flatbuffers::EndianScalar(delta_n_);
  }
  double m0() const {
    return ::flatbuffers::EndianScalar(m0_);
  }
  double ecc() const {
    return ::flatbuffers::EndianScalar(ecc_);
  }
  double omega() const {
    return ::flatbuffers::EndianScalar(omega_);
  }
  double cuc() const {
    return ::flatbuffers::EndianScalar(cuc_);
  }
  double cus() const {
    return ::flatbuffers::EndianScalar(cus_);
  }
  double crc() const {
    return ::flatbuffers::EndianScalar(crc_);
  }
  double crs() const {
    return ::flatbuffers::EndianScalar(crs_);
  }
  double cic() const {
    return ::flatbuffers::EndianScalar(cic_);
  }
  double cis() const {
    return ::flatbuffers::EndianScalar(cis_);
  }
  double i0() const {
    return ::flatbuffers::EndianScalar(i0_);
  }
  double idot() const {
    return ::flatbuffers::EndianScalar(idot_);
  }
  double omega0() const {
    return ::flatbuffers::EndianScalar(omega0_);
  }
  double omegadot() const {
    return ::flatbuffers::EndianScalar(omegadot_);
  }
  uint32_t iodc() const {
    return ::flatbuffers::EndianScalar(iodc_);
  }
  double t0c() const {
    return ::flatbuffers::EndianScalar(t0c_);
  }
  double tgd() const {
    return ::flatbuffers::EndianScalar(tgd_);
  }
  double af0() const {
    return ::flatbuffers::EndianScalar(af0_);
  }
  double af1() const {
    return ::flatbuffers::EndianScalar(af1_);
  }
  double af2() const {
    return ::flatbuffers::EndianScalar(af2_);
  }
  bool a_s() const {
    return ::flatbuffers::EndianScalar(a_s_) != 0;
  }
  double n() const {
    return ::flatbuffers::EndianScalar(n_);
  }
  double ura() const {
    return ::flatbuffers::EndianScalar(ura_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelGPSEphem, 248);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) NovAtelIonUTC FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t header_week_;
  int16_t padding0__;
  int32_t header_ms_;
  double a0_;
  double a1_;
  double a2_;
  double a3_;
  double b0_;
  double b1_;
  double b2_;
  double b3_;
  uint32_t utc_wn_;
  uint32_t tot_;
  double capitala0_;
  double capitala1_;
  uint32_t wn_lsf_;
  uint32_t dn_;
  int32_t deltat_ls_;
  int32_t deltat_lsf_;
  int32_t reserved_;
  int32_t padding1__;

 public:
  NovAtelIonUTC()
      : header_week_(0),
        padding0__(0),
        header_ms_(0),
        a0_(0),
        a1_(0),
        a2_(0),
        a3_(0),
        b0_(0),
        b1_(0),
        b2_(0),
        b3_(0),
        utc_wn_(0),
        tot_(0),
        capitala0_(0),
        capitala1_(0),
        wn_lsf_(0),
        dn_(0),
        deltat_ls_(0),
        deltat_lsf_(0),
        reserved_(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  NovAtelIonUTC(uint16_t _header_week, int32_t _header_ms, double _a0, double _a1, double _a2, double _a3, double _b0, double _b1, double _b2, double _b3, uint32_t _utc_wn, uint32_t _tot, double _capitala0, double _capitala1, uint32_t _wn_lsf, uint32_t _dn, int32_t _deltat_ls, int32_t _deltat_lsf, int32_t _reserved)
      : header_week_(::flatbuffers::EndianScalar(_header_week)),
        padding0__(0),
        header_ms_(::flatbuffers::EndianScalar(_header_ms)),
        a0_(::flatbuffers::EndianScalar(_a0)),
        a1_(::flatbuffers::EndianScalar(_a1)),
        a2_(::flatbuffers::EndianScalar(_a2)),
        a3_(::flatbuffers::EndianScalar(_a3)),
        b0_(::flatbuffers::EndianScalar(_b0)),
        b1_(::flatbuffers::EndianScalar(_b1)),
        b2_(::flatbuffers::EndianScalar(_b2)),
        b3_(::flatbuffers::EndianScalar(_b3)),
        utc_wn_(::flatbuffers::EndianScalar(_utc_wn)),
        tot_(::flatbuffers::EndianScalar(_tot)),
        capitala0_(::flatbuffers::EndianScalar(_capitala0)),
        capitala1_(::flatbuffers::EndianScalar(_capitala1)),
        wn_lsf_(::flatbuffers::EndianScalar(_wn_lsf)),
        dn_(::flatbuffers::EndianScalar(_dn)),
        deltat_ls_(::flatbuffers::EndianScalar(_deltat_ls)),
        deltat_lsf_(::flatbuffers::EndianScalar(_deltat_lsf)),
        reserved_(::flatbuffers::EndianScalar(_reserved)),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  uint16_t header_week() const {
    return ::flatbuffers::EndianScalar(header_week_);
  }
  int32_t header_ms() const {
    return ::flatbuffers::EndianScalar(header_ms_);
  }
  double a0() const {
    return ::flatbuffers::EndianScalar(a0_);
  }
  double a1() const {
    return ::flatbuffers::EndianScalar(a1_);
  }
  double a2() const {
    return ::flatbuffers::EndianScalar(a2_);
  }
  double a3() const {
    return ::flatbuffers::EndianScalar(a3_);
  }
  double b0() const {
    return ::flatbuffers::EndianScalar(b0_);
  }
  double b1() const {
    return ::flatbuffers::EndianScalar(b1_);
  }
  double b2() const {
    return ::flatbuffers::EndianScalar(b2_);
  }
  double b3() const {
    return ::flatbuffers::EndianScalar(b3_);
  }
  uint32_t utc_wn() const {
    return ::flatbuffers::EndianScalar(utc_wn_);
  }
  uint32_t tot() const {
    return ::flatbuffers::EndianScalar(tot_);
  }
  double capitala0() const {
    return ::flatbuffers::EndianScalar(capitala0_);
  }
  double capitala1() const {
    return ::flatbuffers::EndianScalar(capitala1_);
  }
  uint32_t wn_lsf() const {
    return ::flatbuffers::EndianScalar(wn_lsf_);
  }
  uint32_t dn() const {
    return ::flatbuffers::EndianScalar(dn_);
  }
  int32_t deltat_ls() const {
    return ::flatbuffers::EndianScalar(deltat_ls_);
  }
  int32_t deltat_lsf() const {
    return ::flatbuffers::EndianScalar(deltat_lsf_);
  }
  int32_t reserved() const {
    return ::flatbuffers::EndianScalar(reserved_);
  }
};
FLATBUFFERS_STRUCT_END(NovAtelIonUTC, 120);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PVT FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t tow_;
  uint16_t wnc_;
  uint8_t mode_;
  uint8_t pvterror_;
  double phi_;
  double lambda_;
  double h_;
  float undulation_;
  float vn_;
  float ve_;
  float vu_;
  float cog_;
  int32_t padding0__;
  double rxclkbias_;
  double rxclkdrift_;
  uint8_t time_system_;
  uint8_t datum_;
  uint8_t nr_sv_;
  uint8_t wacorrinfo_;
  uint16_t refid_;
  uint16_t meancorrage_;
  uint32_t signalinfo_;
  uint8_t alertflag_;
  uint8_t nrbases_;
  uint16_t pppinfo_;
  uint8_t donotuse_;
  int8_t padding1__;  int16_t padding2__;  int32_t padding3__;

 public:
  PVT()
      : tow_(0),
        wnc_(0),
        mode_(0),
        pvterror_(0),
        phi_(0),
        lambda_(0),
        h_(0),
        undulation_(0),
        vn_(0),
        ve_(0),
        vu_(0),
        cog_(0),
        padding0__(0),
        rxclkbias_(0),
        rxclkdrift_(0),
        time_system_(0),
        datum_(0),
        nr_sv_(0),
        wacorrinfo_(0),
        refid_(0),
        meancorrage_(0),
        signalinfo_(0),
        alertflag_(0),
        nrbases_(0),
        pppinfo_(0),
        donotuse_(0),
        padding1__(0),
        padding2__(0),
        padding3__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
    (void)padding3__;
  }
  PVT(uint32_t _tow, uint16_t _wnc, uint8_t _mode, uint8_t _pvterror, double _phi, double _lambda, double _h, float _undulation, float _vn, float _ve, float _vu, float _cog, double _rxclkbias, double _rxclkdrift, uint8_t _time_system, uint8_t _datum, uint8_t _nr_sv, uint8_t _wacorrinfo, uint16_t _refid, uint16_t _meancorrage, uint32_t _signalinfo, uint8_t _alertflag, uint8_t _nrbases, uint16_t _pppinfo, bool _donotuse)
      : tow_(::flatbuffers::EndianScalar(_tow)),
        wnc_(::flatbuffers::EndianScalar(_wnc)),
        mode_(::flatbuffers::EndianScalar(_mode)),
        pvterror_(::flatbuffers::EndianScalar(_pvterror)),
        phi_(::flatbuffers::EndianScalar(_phi)),
        lambda_(::flatbuffers::EndianScalar(_lambda)),
        h_(::flatbuffers::EndianScalar(_h)),
        undulation_(::flatbuffers::EndianScalar(_undulation)),
        vn_(::flatbuffers::EndianScalar(_vn)),
        ve_(::flatbuffers::EndianScalar(_ve)),
        vu_(::flatbuffers::EndianScalar(_vu)),
        cog_(::flatbuffers::EndianScalar(_cog)),
        padding0__(0),
        rxclkbias_(::flatbuffers::EndianScalar(_rxclkbias)),
        rxclkdrift_(::flatbuffers::EndianScalar(_rxclkdrift)),
        time_system_(::flatbuffers::EndianScalar(_time_system)),
        datum_(::flatbuffers::EndianScalar(_datum)),
        nr_sv_(::flatbuffers::EndianScalar(_nr_sv)),
        wacorrinfo_(::flatbuffers::EndianScalar(_wacorrinfo)),
        refid_(::flatbuffers::EndianScalar(_refid)),
        meancorrage_(::flatbuffers::EndianScalar(_meancorrage)),
        signalinfo_(::flatbuffers::EndianScalar(_signalinfo)),
        alertflag_(::flatbuffers::EndianScalar(_alertflag)),
        nrbases_(::flatbuffers::EndianScalar(_nrbases)),
        pppinfo_(::flatbuffers::EndianScalar(_pppinfo)),
        donotuse_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_donotuse))),
        padding1__(0),
        padding2__(0),
        padding3__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
    (void)padding3__;
  }
  uint32_t tow() const {
    return ::flatbuffers::EndianScalar(tow_);
  }
  uint16_t wnc() const {
    return ::flatbuffers::EndianScalar(wnc_);
  }
  uint8_t mode() const {
    return ::flatbuffers::EndianScalar(mode_);
  }
  uint8_t pvterror() const {
    return ::flatbuffers::EndianScalar(pvterror_);
  }
  double phi() const {
    return ::flatbuffers::EndianScalar(phi_);
  }
  double lambda() const {
    return ::flatbuffers::EndianScalar(lambda_);
  }
  double h() const {
    return ::flatbuffers::EndianScalar(h_);
  }
  float undulation() const {
    return ::flatbuffers::EndianScalar(undulation_);
  }
  float vn() const {
    return ::flatbuffers::EndianScalar(vn_);
  }
  float ve() const {
    return ::flatbuffers::EndianScalar(ve_);
  }
  float vu() const {
    return ::flatbuffers::EndianScalar(vu_);
  }
  float cog() const {
    return ::flatbuffers::EndianScalar(cog_);
  }
  double rxclkbias() const {
    return ::flatbuffers::EndianScalar(rxclkbias_);
  }
  double rxclkdrift() const {
    return ::flatbuffers::EndianScalar(rxclkdrift_);
  }
  uint8_t time_system() const {
    return ::flatbuffers::EndianScalar(time_system_);
  }
  uint8_t datum() const {
    return ::flatbuffers::EndianScalar(datum_);
  }
  uint8_t nr_sv() const {
    return ::flatbuffers::EndianScalar(nr_sv_);
  }
  uint8_t wacorrinfo() const {
    return ::flatbuffers::EndianScalar(wacorrinfo_);
  }
  uint16_t refid() const {
    return ::flatbuffers::EndianScalar(refid_);
  }
  uint16_t meancorrage() const {
    return ::flatbuffers::EndianScalar(meancorrage_);
  }
  uint32_t signalinfo() const {
    return ::flatbuffers::EndianScalar(signalinfo_);
  }
  uint8_t alertflag() const {
    return ::flatbuffers::EndianScalar(alertflag_);
  }
  uint8_t nrbases() const {
    return ::flatbuffers::EndianScalar(nrbases_);
  }
  uint16_t pppinfo() const {
    return ::flatbuffers::EndianScalar(pppinfo_);
  }
  bool donotuse() const {
    return ::flatbuffers::EndianScalar(donotuse_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(PVT, 96);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) SFusionCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t sim_state_;
  uint8_t eject_usb_;
  int16_t padding0__;
  uint32_t init_ekf_;
  uint8_t use_dvl_;
  uint8_t use_diff_corr_;
  uint8_t use_multi_const_;
  int8_t padding1__;
  uint32_t trigger_nav_;
  uint8_t disk_write_;
  int8_t padding2__;  int16_t padding3__;

 public:
  SFusionCommand()
      : sim_state_(0),
        eject_usb_(0),
        padding0__(0),
        init_ekf_(0),
        use_dvl_(0),
        use_diff_corr_(0),
        use_multi_const_(0),
        padding1__(0),
        trigger_nav_(0),
        disk_write_(0),
        padding2__(0),
        padding3__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
    (void)padding3__;
  }
  SFusionCommand(uint8_t _sim_state, uint8_t _eject_usb, uint32_t _init_ekf, bool _use_dvl, uint8_t _use_diff_corr, uint8_t _use_multi_const, uint32_t _trigger_nav, bool _disk_write)
      : sim_state_(::flatbuffers::EndianScalar(_sim_state)),
        eject_usb_(::flatbuffers::EndianScalar(_eject_usb)),
        padding0__(0),
        init_ekf_(::flatbuffers::EndianScalar(_init_ekf)),
        use_dvl_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_use_dvl))),
        use_diff_corr_(::flatbuffers::EndianScalar(_use_diff_corr)),
        use_multi_const_(::flatbuffers::EndianScalar(_use_multi_const)),
        padding1__(0),
        trigger_nav_(::flatbuffers::EndianScalar(_trigger_nav)),
        disk_write_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_disk_write))),
        padding2__(0),
        padding3__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
    (void)padding3__;
  }
  uint8_t sim_state() const {
    return ::flatbuffers::EndianScalar(sim_state_);
  }
  uint8_t eject_usb() const {
    return ::flatbuffers::EndianScalar(eject_usb_);
  }
  uint32_t init_ekf() const {
    return ::flatbuffers::EndianScalar(init_ekf_);
  }
  bool use_dvl() const {
    return ::flatbuffers::EndianScalar(use_dvl_) != 0;
  }
  uint8_t use_diff_corr() const {
    return ::flatbuffers::EndianScalar(use_diff_corr_);
  }
  uint8_t use_multi_const() const {
    return ::flatbuffers::EndianScalar(use_multi_const_);
  }
  uint32_t trigger_nav() const {
    return ::flatbuffers::EndianScalar(trigger_nav_);
  }
  bool disk_write() const {
    return ::flatbuffers::EndianScalar(disk_write_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(SFusionCommand, 20);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) SFusionTime FLATBUFFERS_FINAL_CLASS {
 private:
  double sim_time_;
  int32_t rostime_sec_;
  uint32_t rostime_nanosec_;

 public:
  SFusionTime()
      : sim_time_(0),
        rostime_sec_(0),
        rostime_nanosec_(0) {
  }
  SFusionTime(double _sim_time, int32_t _rostime_sec, uint32_t _rostime_nanosec)
      : sim_time_(::flatbuffers::EndianScalar(_sim_time)),
        rostime_sec_(::flatbuffers::EndianScalar(_rostime_sec)),
        rostime_nanosec_(::flatbuffers::EndianScalar(_rostime_nanosec)) {
  }
  double sim_time() const {
    return ::flatbuffers::EndianScalar(sim_time_);
  }
  int32_t rostime_sec() const {
    return ::flatbuffers::EndianScalar(rostime_sec_);
  }
  uint32_t rostime_nanosec() const {
    return ::flatbuffers::EndianScalar(rostime_nanosec_);
  }
};
FLATBUFFERS_STRUCT_END(SFusionTime, 16);

struct SFusionData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SFusionDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_PPS = 6,
    VT_COMMAND = 8,
    VT_PVT = 10,
    VT_ACC = 12,
    VT_GYRO = 14,
    VT_MAG = 16,
    VT_AMB = 18,
    VT_OEM7_BESTPOS = 20,
    VT_OEM7_BESTVEL = 22,
    VT_OEM7_CLOCKMODEL = 24,
    VT_OEM7_DUALANTENNAHEADING = 26,
    VT_OEM7_GALCLOCK = 28,
    VT_OEM7_GALFNAVEPHEM = 30,
    VT_OEM7_GALINAVEPHEM = 32,
    VT_OEM7_GALIONO = 34,
    VT_OEM7_GPSEPHEM = 36,
    VT_OEM7_IONUTC = 38,
    VT_FILTER_TOW = 40,
    VT_STATE = 42,
    VT_COV_MATRIX = 44
  };
  const IRT::SFusion::SFusionTime *time() const {
    return GetStruct<const IRT::SFusion::SFusionTime *>(VT_TIME);
  }
  uint32_t pps() const {
    return GetField<uint32_t>(VT_PPS, 0);
  }
  const IRT::SFusion::SFusionCommand *command() const {
    return GetStruct<const IRT::SFusion::SFusionCommand *>(VT_COMMAND);
  }
  const IRT::SFusion::PVT *pvt() const {
    return GetStruct<const IRT::SFusion::PVT *>(VT_PVT);
  }
  const IRT::SFusion::Acc *acc() const {
    return GetStruct<const IRT::SFusion::Acc *>(VT_ACC);
  }
  const IRT::SFusion::Gyro *gyro() const {
    return GetStruct<const IRT::SFusion::Gyro *>(VT_GYRO);
  }
  const IRT::SFusion::Mag *mag() const {
    return GetStruct<const IRT::SFusion::Mag *>(VT_MAG);
  }
  const IRT::SFusion::Amb *amb() const {
    return GetStruct<const IRT::SFusion::Amb *>(VT_AMB);
  }
  const IRT::SFusion::NovAtelBestpos *oem7_bestpos() const {
    return GetStruct<const IRT::SFusion::NovAtelBestpos *>(VT_OEM7_BESTPOS);
  }
  const IRT::SFusion::NovAtelBestvel *oem7_bestvel() const {
    return GetStruct<const IRT::SFusion::NovAtelBestvel *>(VT_OEM7_BESTVEL);
  }
  const IRT::SFusion::NovAtelClockModel *oem7_clockmodel() const {
    return GetStruct<const IRT::SFusion::NovAtelClockModel *>(VT_OEM7_CLOCKMODEL);
  }
  const IRT::SFusion::NovAtelDualAntennaHeading *oem7_dualantennaheading() const {
    return GetStruct<const IRT::SFusion::NovAtelDualAntennaHeading *>(VT_OEM7_DUALANTENNAHEADING);
  }
  const IRT::SFusion::NovAtelGalClock *oem7_galclock() const {
    return GetStruct<const IRT::SFusion::NovAtelGalClock *>(VT_OEM7_GALCLOCK);
  }
  const IRT::SFusion::NovAtelGalFnavEphem *oem7_galfnavephem() const {
    return GetStruct<const IRT::SFusion::NovAtelGalFnavEphem *>(VT_OEM7_GALFNAVEPHEM);
  }
  const IRT::SFusion::NovAtelGalInavEphem *oem7_galinavephem() const {
    return GetStruct<const IRT::SFusion::NovAtelGalInavEphem *>(VT_OEM7_GALINAVEPHEM);
  }
  const IRT::SFusion::NovAtelGalIono *oem7_galiono() const {
    return GetStruct<const IRT::SFusion::NovAtelGalIono *>(VT_OEM7_GALIONO);
  }
  const IRT::SFusion::NovAtelGPSEphem *oem7_gpsephem() const {
    return GetStruct<const IRT::SFusion::NovAtelGPSEphem *>(VT_OEM7_GPSEPHEM);
  }
  const IRT::SFusion::NovAtelIonUTC *oem7_ionutc() const {
    return GetStruct<const IRT::SFusion::NovAtelIonUTC *>(VT_OEM7_IONUTC);
  }
  double filter_tow() const {
    return GetField<double>(VT_FILTER_TOW, 0.0);
  }
  const ::flatbuffers::Vector<double> *state() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_STATE);
  }
  const ::flatbuffers::Vector<double> *cov_matrix() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_COV_MATRIX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<IRT::SFusion::SFusionTime>(verifier, VT_TIME, 8) &&
           VerifyField<uint32_t>(verifier, VT_PPS, 4) &&
           VerifyField<IRT::SFusion::SFusionCommand>(verifier, VT_COMMAND, 4) &&
           VerifyField<IRT::SFusion::PVT>(verifier, VT_PVT, 8) &&
           VerifyField<IRT::SFusion::Acc>(verifier, VT_ACC, 8) &&
           VerifyField<IRT::SFusion::Gyro>(verifier, VT_GYRO, 8) &&
           VerifyField<IRT::SFusion::Mag>(verifier, VT_MAG, 8) &&
           VerifyField<IRT::SFusion::Amb>(verifier, VT_AMB, 8) &&
           VerifyField<IRT::SFusion::NovAtelBestpos>(verifier, VT_OEM7_BESTPOS, 8) &&
           VerifyField<IRT::SFusion::NovAtelBestvel>(verifier, VT_OEM7_BESTVEL, 8) &&
           VerifyField<IRT::SFusion::NovAtelClockModel>(verifier, VT_OEM7_CLOCKMODEL, 4) &&
           VerifyField<IRT::SFusion::NovAtelDualAntennaHeading>(verifier, VT_OEM7_DUALANTENNAHEADING, 4) &&
           VerifyField<IRT::SFusion::NovAtelGalClock>(verifier, VT_OEM7_GALCLOCK, 8) &&
           VerifyField<IRT::SFusion::NovAtelGalFnavEphem>(verifier, VT_OEM7_GALFNAVEPHEM, 8) &&
           VerifyField<IRT::SFusion::NovAtelGalInavEphem>(verifier, VT_OEM7_GALINAVEPHEM, 8) &&
           VerifyField<IRT::SFusion::NovAtelGalIono>(verifier, VT_OEM7_GALIONO, 8) &&
           VerifyField<IRT::SFusion::NovAtelGPSEphem>(verifier, VT_OEM7_GPSEPHEM, 8) &&
           VerifyField<IRT::SFusion::NovAtelIonUTC>(verifier, VT_OEM7_IONUTC, 8) &&
           VerifyField<double>(verifier, VT_FILTER_TOW, 8) &&
           VerifyOffset(verifier, VT_STATE) &&
           verifier.VerifyVector(state()) &&
           VerifyOffset(verifier, VT_COV_MATRIX) &&
           verifier.VerifyVector(cov_matrix()) &&
           verifier.EndTable();
  }
};

struct SFusionDataBuilder {
  typedef SFusionData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_time(const IRT::SFusion::SFusionTime *time) {
    fbb_.AddStruct(SFusionData::VT_TIME, time);
  }
  void add_pps(uint32_t pps) {
    fbb_.AddElement<uint32_t>(SFusionData::VT_PPS, pps, 0);
  }
  void add_command(const IRT::SFusion::SFusionCommand *command) {
    fbb_.AddStruct(SFusionData::VT_COMMAND, command);
  }
  void add_pvt(const IRT::SFusion::PVT *pvt) {
    fbb_.AddStruct(SFusionData::VT_PVT, pvt);
  }
  void add_acc(const IRT::SFusion::Acc *acc) {
    fbb_.AddStruct(SFusionData::VT_ACC, acc);
  }
  void add_gyro(const IRT::SFusion::Gyro *gyro) {
    fbb_.AddStruct(SFusionData::VT_GYRO, gyro);
  }
  void add_mag(const IRT::SFusion::Mag *mag) {
    fbb_.AddStruct(SFusionData::VT_MAG, mag);
  }
  void add_amb(const IRT::SFusion::Amb *amb) {
    fbb_.AddStruct(SFusionData::VT_AMB, amb);
  }
  void add_oem7_bestpos(const IRT::SFusion::NovAtelBestpos *oem7_bestpos) {
    fbb_.AddStruct(SFusionData::VT_OEM7_BESTPOS, oem7_bestpos);
  }
  void add_oem7_bestvel(const IRT::SFusion::NovAtelBestvel *oem7_bestvel) {
    fbb_.AddStruct(SFusionData::VT_OEM7_BESTVEL, oem7_bestvel);
  }
  void add_oem7_clockmodel(const IRT::SFusion::NovAtelClockModel *oem7_clockmodel) {
    fbb_.AddStruct(SFusionData::VT_OEM7_CLOCKMODEL, oem7_clockmodel);
  }
  void add_oem7_dualantennaheading(const IRT::SFusion::NovAtelDualAntennaHeading *oem7_dualantennaheading) {
    fbb_.AddStruct(SFusionData::VT_OEM7_DUALANTENNAHEADING, oem7_dualantennaheading);
  }
  void add_oem7_galclock(const IRT::SFusion::NovAtelGalClock *oem7_galclock) {
    fbb_.AddStruct(SFusionData::VT_OEM7_GALCLOCK, oem7_galclock);
  }
  void add_oem7_galfnavephem(const IRT::SFusion::NovAtelGalFnavEphem *oem7_galfnavephem) {
    fbb_.AddStruct(SFusionData::VT_OEM7_GALFNAVEPHEM, oem7_galfnavephem);
  }
  void add_oem7_galinavephem(const IRT::SFusion::NovAtelGalInavEphem *oem7_galinavephem) {
    fbb_.AddStruct(SFusionData::VT_OEM7_GALINAVEPHEM, oem7_galinavephem);
  }
  void add_oem7_galiono(const IRT::SFusion::NovAtelGalIono *oem7_galiono) {
    fbb_.AddStruct(SFusionData::VT_OEM7_GALIONO, oem7_galiono);
  }
  void add_oem7_gpsephem(const IRT::SFusion::NovAtelGPSEphem *oem7_gpsephem) {
    fbb_.AddStruct(SFusionData::VT_OEM7_GPSEPHEM, oem7_gpsephem);
  }
  void add_oem7_ionutc(const IRT::SFusion::NovAtelIonUTC *oem7_ionutc) {
    fbb_.AddStruct(SFusionData::VT_OEM7_IONUTC, oem7_ionutc);
  }
  void add_filter_tow(double filter_tow) {
    fbb_.AddElement<double>(SFusionData::VT_FILTER_TOW, filter_tow, 0.0);
  }
  void add_state(::flatbuffers::Offset<::flatbuffers::Vector<double>> state) {
    fbb_.AddOffset(SFusionData::VT_STATE, state);
  }
  void add_cov_matrix(::flatbuffers::Offset<::flatbuffers::Vector<double>> cov_matrix) {
    fbb_.AddOffset(SFusionData::VT_COV_MATRIX, cov_matrix);
  }
  explicit SFusionDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SFusionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SFusionData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SFusionData> CreateSFusionData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const IRT::SFusion::SFusionTime *time = nullptr,
    uint32_t pps = 0,
    const IRT::SFusion::SFusionCommand *command = nullptr,
    const IRT::SFusion::PVT *pvt = nullptr,
    const IRT::SFusion::Acc *acc = nullptr,
    const IRT::SFusion::Gyro *gyro = nullptr,
    const IRT::SFusion::Mag *mag = nullptr,
    const IRT::SFusion::Amb *amb = nullptr,
    const IRT::SFusion::NovAtelBestpos *oem7_bestpos = nullptr,
    const IRT::SFusion::NovAtelBestvel *oem7_bestvel = nullptr,
    const IRT::SFusion::NovAtelClockModel *oem7_clockmodel = nullptr,
    const IRT::SFusion::NovAtelDualAntennaHeading *oem7_dualantennaheading = nullptr,
    const IRT::SFusion::NovAtelGalClock *oem7_galclock = nullptr,
    const IRT::SFusion::NovAtelGalFnavEphem *oem7_galfnavephem = nullptr,
    const IRT::SFusion::NovAtelGalInavEphem *oem7_galinavephem = nullptr,
    const IRT::SFusion::NovAtelGalIono *oem7_galiono = nullptr,
    const IRT::SFusion::NovAtelGPSEphem *oem7_gpsephem = nullptr,
    const IRT::SFusion::NovAtelIonUTC *oem7_ionutc = nullptr,
    double filter_tow = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> state = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> cov_matrix = 0) {
  SFusionDataBuilder builder_(_fbb);
  builder_.add_filter_tow(filter_tow);
  builder_.add_cov_matrix(cov_matrix);
  builder_.add_state(state);
  builder_.add_oem7_ionutc(oem7_ionutc);
  builder_.add_oem7_gpsephem(oem7_gpsephem);
  builder_.add_oem7_galiono(oem7_galiono);
  builder_.add_oem7_galinavephem(oem7_galinavephem);
  builder_.add_oem7_galfnavephem(oem7_galfnavephem);
  builder_.add_oem7_galclock(oem7_galclock);
  builder_.add_oem7_dualantennaheading(oem7_dualantennaheading);
  builder_.add_oem7_clockmodel(oem7_clockmodel);
  builder_.add_oem7_bestvel(oem7_bestvel);
  builder_.add_oem7_bestpos(oem7_bestpos);
  builder_.add_amb(amb);
  builder_.add_mag(mag);
  builder_.add_gyro(gyro);
  builder_.add_acc(acc);
  builder_.add_pvt(pvt);
  builder_.add_command(command);
  builder_.add_pps(pps);
  builder_.add_time(time);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SFusionData> CreateSFusionDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const IRT::SFusion::SFusionTime *time = nullptr,
    uint32_t pps = 0,
    const IRT::SFusion::SFusionCommand *command = nullptr,
    const IRT::SFusion::PVT *pvt = nullptr,
    const IRT::SFusion::Acc *acc = nullptr,
    const IRT::SFusion::Gyro *gyro = nullptr,
    const IRT::SFusion::Mag *mag = nullptr,
    const IRT::SFusion::Amb *amb = nullptr,
    const IRT::SFusion::NovAtelBestpos *oem7_bestpos = nullptr,
    const IRT::SFusion::NovAtelBestvel *oem7_bestvel = nullptr,
    const IRT::SFusion::NovAtelClockModel *oem7_clockmodel = nullptr,
    const IRT::SFusion::NovAtelDualAntennaHeading *oem7_dualantennaheading = nullptr,
    const IRT::SFusion::NovAtelGalClock *oem7_galclock = nullptr,
    const IRT::SFusion::NovAtelGalFnavEphem *oem7_galfnavephem = nullptr,
    const IRT::SFusion::NovAtelGalInavEphem *oem7_galinavephem = nullptr,
    const IRT::SFusion::NovAtelGalIono *oem7_galiono = nullptr,
    const IRT::SFusion::NovAtelGPSEphem *oem7_gpsephem = nullptr,
    const IRT::SFusion::NovAtelIonUTC *oem7_ionutc = nullptr,
    double filter_tow = 0.0,
    const std::vector<double> *state = nullptr,
    const std::vector<double> *cov_matrix = nullptr) {
  auto state__ = state ? _fbb.CreateVector<double>(*state) : 0;
  auto cov_matrix__ = cov_matrix ? _fbb.CreateVector<double>(*cov_matrix) : 0;
  return IRT::SFusion::CreateSFusionData(
      _fbb,
      time,
      pps,
      command,
      pvt,
      acc,
      gyro,
      mag,
      amb,
      oem7_bestpos,
      oem7_bestvel,
      oem7_clockmodel,
      oem7_dualantennaheading,
      oem7_galclock,
      oem7_galfnavephem,
      oem7_galinavephem,
      oem7_galiono,
      oem7_gpsephem,
      oem7_ionutc,
      filter_tow,
      state__,
      cov_matrix__);
}

inline const IRT::SFusion::SFusionData *GetSFusionData(const void *buf) {
  return ::flatbuffers::GetRoot<IRT::SFusion::SFusionData>(buf);
}

inline const IRT::SFusion::SFusionData *GetSizePrefixedSFusionData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IRT::SFusion::SFusionData>(buf);
}

inline bool VerifySFusionDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IRT::SFusion::SFusionData>(nullptr);
}

inline bool VerifySizePrefixedSFusionDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IRT::SFusion::SFusionData>(nullptr);
}

inline void FinishSFusionDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IRT::SFusion::SFusionData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSFusionDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IRT::SFusion::SFusionData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SFusion
}  // namespace IRT

#endif  // FLATBUFFERS_GENERATED_SFUSION_IRT_SFUSION_H_
